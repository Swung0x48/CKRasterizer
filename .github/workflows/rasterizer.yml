name: Rasterizers

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      PROJECT_ROOT: ${{github.workspace}}
      VENDOR_ROOT: ${{github.workspace}}/vendor
      GLEW_VERSION: "2.2.0"
    steps:
      - uses: actions/checkout@v2

      - uses: lukka/get-cmake@latest

      - name: Fetch git submodules
        run: git submodule update --init --recursive --remote

      - name: Download GLEW
        if:   steps.cache.outputs.cache-hit != 'true'
        uses: suisei-cn/actions-download-file@v1.3.0
        id: download-glew  # Remember to give an ID if you need the output filename
        with:
          url: "https://github.com/nigels-com/glew/releases/download/glew-${{env.GLEW_VERSION}}/glew-${{env.GLEW_VERSION}}-win32.zip"
          target: ${{env.VENDOR_ROOT}}
          filename: glew-${{env.GLEW_VERSION}}-win32.zip

      - name:  Config DXSDK path env var
        run:   echo ::set-env name=DXSDK_DIR::${{env.VENDOR_ROOT}}/DXSDK/
        shell: bash

      - name: Extract and setup GLEW
        if:   steps.cache.outputs.cache-hit != 'true'
        working-directory: ${{env.VENDOR_ROOT}}
        run: (7z x ${{env.VENDOR_ROOT}}/glew-${{env.GLEW_VERSION}}-win32.zip -o${{env.VENDOR_ROOT}}) -and (ren glew-${{env.GLEW_VERSION}} glew)

      - name: Download and setup DXSDK
        run:  |
              curl -L https://download.microsoft.com/download/a/e/7/ae743f1f-632b-4809-87a9-aa1bb3458e31/DXSDK_Jun10.exe -o _DX2010_.exe
              7z x _DX2010_.exe DXSDK/Include -o_DX2010_
              7z x _DX2010_.exe DXSDK/Lib/x86 -o_DX2010_
              mv _DX2010_/DXSDK ${{env.VENDOR_ROOT}}/DXSDK
              rm -fR _DX*_ _DX*_.exe
        shell: bash

      # Setup MSVC command prompt environment vars
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Configure CMake
        run: cmake -B ${{env.PROJECT_ROOT}}/build -S ${{env.PROJECT_ROOT}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DVIRTOOLS_SDK_FETCH_FROM_GIT=ON -A Win32

      - name: Build
        working-directory: ${{env.PROJECT_ROOT}}/build
        run: cmake --build ${{env.PROJECT_ROOT}}/build --config ${{env.BUILD_TYPE}}

#      - name: List build dir
#        working-directory: ${{github.workspace}}/BallanceMMOServer/build
#        run: dir

      # - name: Run post-build script
      #   working-directory: ${{github.workspace}}/BallanceMMOServer/build
      #   run: ${{github.workspace}}/BallanceMMOServer/build/postbuild.bat ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{env.PROJECT_ROOT}}
        run: ctest -C ${{env.BUILD_TYPE}}

      # - name: Dry run
      #   working-directory: ${{github.workspace}}/BallanceMMOServer/build/${{env.BUILD_TYPE}}
      #   run: ${{github.workspace}}/BallanceMMOServer/build/${{env.BUILD_TYPE}}/BallanceMMOServer.exe --dry-run

      - name: Release Artifact
        uses: actions/upload-artifact@v3
        with:
          name: rasterizer-windows
          path: ${{env.PROJECT_ROOT}}/build
